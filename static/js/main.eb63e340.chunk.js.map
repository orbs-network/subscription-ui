{"version":3,"sources":["Connect.tsx","Confirmation.tsx","VirtualChainMetadata.tsx","VirtualChainSubscription.tsx","ExistingVirtualChain.tsx","Config.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["Connect","props","ethereum","window","state","ethereumAvailable","undefined","onEthereumEnabled","this","Button","variant","color","onClick","connect","enable","console","log","React","Component","Confirmation","countdown","approveTxStatus","subscribeTxStatus","distributeTxStatus","txReceipt","status","web3","setState","countdownInterval","setInterval","confirmationInterval","a","eth","getTransactionReceipt","approveTxHash","approveTxReceipt","subscribeTxHash","subscribeTxReceipt","distributeTxHash","distributeTxReceipt","getTxStatus","clearInterval","onSuccess","verifySuccess","txHash","config","network","Typography","paragraph","href","getEtherscanURL","target","className","VirtualChainMetadata","description","paidTill","virtualChainId","subscription","Contract","SubscriptionABI","subscriptionAddress","methods","getSubscriptionData","call","data","startTime","Number","onMetadataUpdate","noValidate","autoComplete","InputLabel","htmlFor","TextField","name","value","BigInt","toString","disabled","Date","VirtualChainSubscription","subscriptionAmount","minimalSubscriptionAmount","success","validationError","hasPendingTransactions","onChange","event","subscriptionLabel","Select","native","subscribe","buttonLabel","getAccounts","from","erc20","ERC20ABI","erc20Address","amount","Math","pow","decimals","balanceOf","approveTx","approve","send","request","error","subscribeTx","subscribeForCurrentMonth","distributeTx","distributeFees","batch","BatchRequest","add","execute","onPaymentStarted","ExistingVirtualChain","opened","paymentStarted","metadata","parseVirtualChainId","n","zero32Bits","nHex","utils","numberToHex","slice","length","MainnetConfig","useStyles","withStyles","theme","root","display","appBar","zIndex","drawer","width","flexShrink","drawerPaper","drawerContainer","overflow","content","flexGrow","padding","spacing","connected","newVirtualChain","existingVirtualChain","Web3","classes","CssBaseline","AppBar","position","Toolbar","noWrap","Drawer","paper","List","ListItem","button","selected","ListItemText","primary","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.eb63e340.chunk.js","sourcesContent":["import React from 'react';\nimport Button from '@material-ui/core/Button';\n\ninterface ConnectProps {\n    onEthereumEnabled: (value: boolean) => Promise<void>;\n}\n\ninterface ConnectState extends ConnectProps {\n    ethereumAvailable: boolean;\n    ethereum: any;\n}\n\nclass Connect extends React.Component<ConnectProps, ConnectState> {\n    constructor(props: any) {\n        super(props);\n        const ethereum = (window as any).ethereum as any;\n\n        this.state = {\n            ethereum: ethereum,\n            ethereumAvailable: ethereum !== undefined,\n            onEthereumEnabled: props.onEthereumEnabled,\n        }\n    }\n\n    render() {\n        if (!this.state.ethereumAvailable) {\n            return (\n                <div>\n                    <p>An Ethereum wallet is required.</p>\n                    <p>On desktop, use a web3 browser extension like Metamask.</p>\n                    <p>On mobile, use a mobile app wallet that supports web3 like status.im, imToken or TrustWallet.</p>\n                </div>\n            );\n        }\n\n        return (\n            <div>\n                <p>An Ethereum wallet is required.</p>\n                <Button variant=\"contained\" color=\"primary\" onClick={() => this.connect()}>Connect wallet</Button>\n            </div>\n        )\n    }\n\n    async connect() {\n        try {\n            await this.state.ethereum.enable();\n            this.state.onEthereumEnabled(true);\n        } catch (e) {\n            console.log(e);\n        }\n        \n    }\n}\n\nexport default Connect;","import React from \"react\";\nimport Web3 from \"web3\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { Config } from \"./Config\";\n\nconst TX_CONFIRMED = \"confirmed\";\nconst TX_PENDING = \"pending\";\nconst TX_FAILED = \"failed\";\n\ninterface ConfirmationProps {\n    web3: Web3;\n    config: Config;\n\n    approveTxHash: string;\n    subscribeTxHash: string;\n    distributeTxHash: string; // FIXME remove for v2\n\n    virtualChainId: string;\n\n    onSuccess: (ok: boolean) => void;\n}\n\ninterface ConfirmationState {\n    countdown: number;\n    countdownInterval?: any;\n    confirmationInterval?: any;\n\n    approveTxStatus: string;\n    subscribeTxStatus: string;\n    distributeTxStatus: string; // FIXME remove for v2\n}\n\nclass Confirmation extends React.Component<ConfirmationProps, ConfirmationState> {\n    constructor(props: any) {\n        super(props);\n\n        this.state = {\n            countdown: 0,\n            approveTxStatus: TX_PENDING,\n            subscribeTxStatus: TX_PENDING,\n            distributeTxStatus: TX_PENDING,\n        }\n    }\n\n    getTxStatus(txReceipt: {status: boolean}): string {\n        if (txReceipt) {\n            return txReceipt.status ? TX_CONFIRMED: TX_FAILED;\n        }\n\n        return TX_PENDING;\n    }\n\n    componentDidMount() {\n        const { web3 } = this.props;\n\n        this.setState({\n            countdown: 0,\n        });\n\n        const countdownInterval = setInterval(() => {\n            this.setState({\n                countdown: this.state.countdown + 1,\n            });\n        }, 1000);\n\n        const confirmationInterval = setInterval(async () => {\n            const approveTxReceipt = await web3.eth.getTransactionReceipt(this.props.approveTxHash);\n            const subscribeTxReceipt = await web3.eth.getTransactionReceipt(this.props.subscribeTxHash);\n            const distributeTxReceipt = await web3.eth.getTransactionReceipt(this.props.distributeTxHash);\n\n            this.setState({\n                approveTxStatus: this.getTxStatus(approveTxReceipt),\n                subscribeTxStatus: this.getTxStatus(subscribeTxReceipt),\n                distributeTxStatus: this.getTxStatus(distributeTxReceipt),\n            });\n\n            if (approveTxReceipt && subscribeTxReceipt && distributeTxReceipt) {\n                clearInterval(confirmationInterval);\n                clearInterval(countdownInterval);\n\n                this.setState({\n                    confirmationInterval: undefined,\n                    countdownInterval: undefined,\n                })\n\n                this.props.onSuccess(this.verifySuccess());\n            }\n        }, 3000);\n\n        this.setState({ \n            countdownInterval,\n            confirmationInterval,\n        });\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.state.countdownInterval);\n        clearInterval(this.state.confirmationInterval);\n    }\n\n    getEtherscanURL(txHash: string): string {\n        const { config } = this.props;\n        return `https://${config.network === \"mainnet\" ? \"\" : config.network + \".\"}etherscan.io/tx/${txHash}`;\n    }\n\n    verifySuccess() {\n        const { approveTxStatus, subscribeTxStatus, distributeTxStatus } = this.state;\n        return approveTxStatus === TX_CONFIRMED && subscribeTxStatus === TX_CONFIRMED && distributeTxStatus === TX_CONFIRMED;\n    }\n\n    render() {\n        const { countdown, approveTxStatus, subscribeTxStatus, distributeTxStatus } = this.state;\n        const { approveTxHash, subscribeTxHash, distributeTxHash } = this.props;\n\n        return (\n            <div>\n                { this.state.countdownInterval &&\n                    <Typography paragraph>Waiting for transaction confirmation for {countdown} seconds...</Typography>\n                }\n\n                <Typography paragraph>ERC20 approval <a href={this.getEtherscanURL(approveTxHash!)} target=\"_blank\" className=\"App-monospace\">{approveTxHash}</a> {approveTxStatus}\n                </Typography>\n                <Typography paragraph>Subscription <a href={this.getEtherscanURL(subscribeTxHash!)} target=\"_blank\" className=\"App-monospace\">{subscribeTxHash}</a> {subscribeTxStatus}\n                </Typography>\n                <Typography paragraph>Fee distribution <a href={this.getEtherscanURL(distributeTxHash!)} target=\"_blank\" className=\"App-monospace\">{distributeTxHash}</a> {distributeTxStatus}\n                </Typography>\n            </div>\n        );\n    }\n\n}\n\nexport default Confirmation;","import React from \"react\";\nimport Web3 from \"web3\";\nimport { InputLabel, TextField } from '@material-ui/core';\nimport SubscriptionABI from \"./abi/Subscription.abi.json\";\nimport { Config } from \"./Config\";\n\ninterface VirtualChainMetadataProps {\n    web3: Web3;\n    config: Config;\n    virtualChainId: string;\n\n    onMetadataUpdate?: (metadata: any) => void;\n}\n\ninterface VirtualChainMetadataState {\n    description: string;\n    paidTill: number;\n}\n\nconst SECONDS_IN_MONTH = 2592000;\n\nclass VirtualChainMetadata extends React.Component<VirtualChainMetadataProps, VirtualChainMetadataState> {\n    constructor(props: any) {\n        super(props);\n\n        this.state = {\n            description: \"\",\n            paidTill: 0,\n        }\n    }\n\n    async componentDidMount() {\n        const { web3, config, virtualChainId } = this.props;\n        const subscription = new web3.eth.Contract(SubscriptionABI as any, config.subscriptionAddress);\n\n        const data = await subscription.methods.getSubscriptionData(virtualChainId).call();\n        const description = data[1];\n        const startTime = (Number(data[2]) + SECONDS_IN_MONTH) * 1000;\n\n        if (this.props.onMetadataUpdate) {\n            this.props.onMetadataUpdate({ description, startTime });\n        }\n\n        this.setState({\n            description,\n            paidTill: startTime,\n        });\n    }\n\n    render() {\n        const { virtualChainId } = this.props;\n        const { description, paidTill } = this.state;\n\n        if (!description || !paidTill) {\n            return (<div>Virtual Chain ID not found</div>);\n        }\n\n        return (\n            <form noValidate autoComplete=\"off\">\n                <InputLabel htmlFor=\"vcid\">Virtual Chain Id</InputLabel>\n                <TextField name=\"vcid\" value={BigInt(virtualChainId).toString()} disabled></TextField>\n                <br/>\n                <br/>\n                <InputLabel htmlFor=\"description\">Description</InputLabel>\n                <TextField name=\"description\" value={description} disabled></TextField>\n                <br/>\n                <br/>\n                <InputLabel htmlFor=\"paid-till\">Paid Until</InputLabel>\n                <TextField name=\"paid-till\" value={new Date(paidTill)} disabled></TextField>\n            </form>\n        )        \n    }\n\n}\n\nexport default VirtualChainMetadata;","import React from \"react\";\nimport Button from \"@material-ui/core/Button\"\nimport Web3 from \"web3\";\nimport { InputLabel, TextField, Select } from '@material-ui/core';\nimport ERC20ABI from \"./abi/ERC20.abi.json\";\nimport SubscriptionABI from \"./abi/Subscription.abi.json\";\nimport { Config } from \"./Config\";\nimport Confirmation from \"./Confirmation\";\nimport VirtualChainMetadata from \"./VirtualChainMetadata\";\n\ninterface VirtualChainSubscriptionProps {\n    web3: Web3;\n    config: Config;\n\n    virtualChainId: string;\n    description?: string;\n\n    buttonLabel: string;\n    subscriptionLabel: string;\n\n    onPaymentStarted?: () => void;\n}\n\ninterface VirtualChainSubscriptionState {\n    description: string;\n    subscriptionAmount: number;\n\n    approveTxHash?: string;\n    subscribeTxHash?: string;\n    distributeTxHash?: string; // FIXME remove for v2\n\n    validationError?: string;\n    success: boolean;\n}\n\nclass VirtualChainSubscription extends React.Component<VirtualChainSubscriptionProps, VirtualChainSubscriptionState> {\n    constructor(props: any) {\n        super(props);\n\n        this.state = {\n            description: \"\",\n            subscriptionAmount: props.config.minimalSubscriptionAmount,\n            success: false,\n        }\n    }\n\n    hasPendingTransactions(): boolean {\n        return (this.state.approveTxHash || this.state.subscribeTxHash) !== undefined;\n    }\n\n    render() {\n        const { config } = this.props;\n\n        if (this.state.validationError) {\n            return (\n                <div>\n                    Error: {this.state.validationError}\n                </div>\n            )\n        }\n\n        if (!this.hasPendingTransactions()) {\n            return (\n                <form noValidate autoComplete=\"off\">\n                    { !this.props.description &&\n                        <div>\n                            <InputLabel htmlFor=\"description\">Description</InputLabel>\n                            <TextField name=\"description\" onChange={(event) => this.setState({\n                                description: event.target.value,\n                            })}/>\n                            <br/>\n                            <br/>\n                        </div>\n                    }\n\n                <InputLabel htmlFor=\"subscription\">{this.props.subscriptionLabel}</InputLabel>\n                    <Select\n                        native\n                        value={this.state.subscriptionAmount}\n                        onChange={(event) => this.setState({\n                            subscriptionAmount: Number(event.target.value),\n                        })}\n                        name=\"subscription\"\n                        >\n                        <option value={config.minimalSubscriptionAmount}>One month - {config.minimalSubscriptionAmount} ORBS</option>\n                        <option value={config.minimalSubscriptionAmount*2}>Two months - {config.minimalSubscriptionAmount*2} ORBS</option>\n                        <option value={config.minimalSubscriptionAmount*3}>Three months - {config.minimalSubscriptionAmount*3} ORBS</option>\n                    </Select>\n\n                    <br/><br/>\n                    <Button variant=\"contained\" color=\"primary\" onClick={() => this.subscribe()}>{this.props.buttonLabel}</Button>\n                </form>\n            )\n        } else {\n            const { web3, virtualChainId } = this.props;\n            return (\n                <div>\n                    <Confirmation \n                        web3={web3} \n                        config={config}\n                        approveTxHash={this.state.approveTxHash!}\n                        subscribeTxHash={this.state.subscribeTxHash!}\n                        distributeTxHash={this.state.distributeTxHash!}\n                        virtualChainId={virtualChainId}\n                        onSuccess={(success) => this.setState({ success })}\n                    />\n                    { this.state.success &&\n                        <VirtualChainMetadata virtualChainId={virtualChainId} config={config} web3={web3} />\n                    }\n                </div>\n            )\n        }\n    }\n\n    async subscribe() {\n        const { web3, config } = this.props;\n        const from = (await web3.eth.getAccounts())[0];\n\n        const erc20 = new web3.eth.Contract(ERC20ABI as any, config.erc20Address);\n        const subscription = new web3.eth.Contract(SubscriptionABI as any, config.subscriptionAddress);\n\n        const amount = this.state.subscriptionAmount * Math.pow(10, config.decimals);\n        const orbsBalance = await erc20.methods.balanceOf(from).call();\n        if (orbsBalance < amount) {\n            this.setState({\n                validationError: \"insufficient funds\",\n            })\n            return;\n        }\n\n        const approveTx = erc20.methods.approve(\n            config.subscriptionAddress, \n            amount\n        ).send.request({ from }, (error: any, approveTxHash: string) => {\n            this.setState({ approveTxHash });\n        });\n\n        const subscribeTx = subscription.methods.subscribeForCurrentMonth(\n            this.props.virtualChainId,\n            (this.state.description || this.props.description),\n            amount\n        ).send.request({ from }, (error: any, subscribeTxHash: string) => {\n            this.setState({ subscribeTxHash })\n        });\n\n        const distributeTx = subscription.methods.distributeFees()\n            .send.request({ from }, (error: any, distributeTxHash: string) => {\n                this.setState({ distributeTxHash })\n            });\n\n        const batch = new web3.BatchRequest();\n        batch.add(approveTx);\n        batch.add(subscribeTx);\n        batch.add(distributeTx);\n        batch.execute();\n\n        if (this.props.onPaymentStarted) {\n            this.props.onPaymentStarted();\n        }\n    }\n}\n\nexport default VirtualChainSubscription;","import React from \"react\";\nimport Web3 from \"web3\";\nimport { InputLabel, TextField, Button } from '@material-ui/core';\nimport { Config } from \"./Config\";\nimport VirtualChainMetadata from \"./VirtualChainMetadata\";\nimport VirtualChainSubscription from \"./VirtualChainSubscription\";\n\ninterface ExistingVirtualChainProps {\n    web3: Web3;\n    config: Config;    \n}\n\ninterface ExistingVirtualChainState {\n    virtualChainId: string;\n    description: string;\n    opened: boolean;\n    paymentStarted: boolean;\n}\n\nclass ExistingVirtualChain extends React.Component<ExistingVirtualChainProps, ExistingVirtualChainState> {\n    constructor(props: any) {\n        super(props);\n\n        this.state = {\n            virtualChainId: \"\",\n            description: \"\",\n            opened: false,\n            paymentStarted: false,\n        }\n    }\n\n    render() {\n        if (!this.state.opened) {\n            return (<div>\n                <form noValidate autoComplete=\"off\">\n                    <InputLabel htmlFor=\"vcid\">Virtual Chain Id</InputLabel>\n                    <TextField name=\"vcid\" onChange={(event) => this.setState({ virtualChainId: this.parseVirtualChainId(event.target.value) })}></TextField>\n                    <br/>\n                    <br/>\n                    <Button variant=\"contained\" color=\"primary\" onClick={() => this.setState({ opened: true })}>Open</Button>\n                </form>\n            </div>)\n        }\n\n        return (<div>\n            { !this.state.paymentStarted &&\n                <VirtualChainMetadata web3={this.props.web3} config={this.props.config} virtualChainId={this.state.virtualChainId}\n                    onMetadataUpdate={(metadata: any) => this.setState({ description: metadata.description })} />\n            }\n            { this.state.description && \n                <VirtualChainSubscription web3={this.props.web3} config={this.props.config}\n                    virtualChainId={this.state.virtualChainId}\n                    buttonLabel=\"Pay\" \n                    subscriptionLabel=\"Payment\"\n                    description={this.state.description}\n                    onPaymentStarted={() => this.setState({ paymentStarted: true })} />\n            }\n        </div>)\n    }\n\n    parseVirtualChainId(n: string): string {\n        const zero32Bits = \"0x0000000000000000000000000000000000000000000000000000000000000000\";\n        const nHex = this.props.web3.utils.numberToHex(Number(n)).slice(2);\n        return zero32Bits.slice(0, zero32Bits.length - nHex.length) + nHex\n    }\n}\n\nexport default ExistingVirtualChain;","export interface Config {\n    erc20Address: string;\n    subscriptionAddress: string;\n    network: string;\n    minimalSubscriptionAmount: number;\n    decimals: number;\n}\n\nexport const MainnetConfig: Config = {\n    erc20Address: \"0xff56cc6b1e6ded347aa0b7676c85ab0b3d08b0fa\",\n    subscriptionAddress: \"0x6e79DFB79CD53A2b08bC8c2852DecA7D73cD24fC\",\n    network: \"mainnet\",\n    minimalSubscriptionAmount: 6200,\n    decimals: 18,\n}\n\nexport const RopstenConfig: Config = {\n    erc20Address: \"0xeD0Aa9A4F9e5ae9092994f4B86F6AAa89944939b\",\n    subscriptionAddress: \"0xe654ad79a93af035a60c66100aa95dfd2215cc51\",\n    network: \"ropsten\",\n    minimalSubscriptionAmount: 100,\n    decimals: 0,\n}\n","import React from 'react';\nimport './App.css';\nimport Connect from \"./Connect\";\nimport Web3 from \"web3\";\n\nimport { withStyles } from '@material-ui/core/styles';\nimport Drawer from '@material-ui/core/Drawer';\nimport AppBar from '@material-ui/core/AppBar';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport List from '@material-ui/core/List';\nimport Typography from '@material-ui/core/Typography';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport VirtualChainSubscription from './VirtualChainSubscription';\nimport ExistingVirtualChain from \"./ExistingVirtualChain\";\nimport { Config, RopstenConfig, MainnetConfig } from './Config';\n\ninterface AppState {\n  connected: boolean;\n  web3?: Web3;\n  config: Config;\n\n  newVirtualChain: boolean;\n  existingVirtualChain: boolean;\n}\n\nconst drawerWidth = 240;\n\nconst useStyles = withStyles((theme) => ({\n  root: {\n    display: 'flex',\n  },\n  appBar: {\n    zIndex: theme.zIndex.drawer + 1,\n  },\n  drawer: {\n    width: drawerWidth,\n    flexShrink: 0,\n  },\n  drawerPaper: {\n    width: drawerWidth,\n  },\n  drawerContainer: {\n    overflow: 'auto',\n  },\n  content: {\n    flexGrow: 1,\n    padding: theme.spacing(3),\n  },\n}));\n\nclass App extends React.Component<{}, AppState> {\n  constructor(props: any) {\n    super(props);\n\n    this.state = {\n      connected: false,\n      newVirtualChain: false,\n      existingVirtualChain: false,\n\n      config: MainnetConfig,\n    };\n    \n  }\n  \n  async onEthereumEnabled(connected: boolean) {\n    const web3 = new Web3((window as any).ethereum);\n\n    this.setState({\n      connected,\n      web3,\n    });\n  }\n\n  render() {\n    const { classes } = this.props as any;\n\n    return (\n      <div className={classes.root}>\n        <CssBaseline />\n        <AppBar position=\"fixed\" className={classes.appBar}>\n          <Toolbar>\n            <Typography variant=\"h6\" noWrap>\n            Orbs Virtual Chain Console\n            </Typography>\n          </Toolbar>\n        </AppBar>\n        <Drawer\n          className={classes.drawer}\n          variant=\"permanent\"\n          classes={{\n            paper: classes.drawerPaper,\n          }}\n        >\n          <Toolbar />\n          <div className={classes.drawerContainer}>\n            <List>\n              <ListItem button selected={this.state.newVirtualChain} onClick={() => this.setState({\n                  newVirtualChain: true,\n                  existingVirtualChain: false,\n                })} >\n                <ListItemText primary=\"New Virtual Chain\"/>\n              </ListItem>\n              <ListItem button selected={this.state.existingVirtualChain} onClick={() => this.setState({\n                  newVirtualChain: false,\n                  existingVirtualChain: true,\n                })}>\n                <ListItemText primary=\"Existing Virtual Chain\"/>\n              </ListItem>\n              <ListItem button>\n                <ListItemText primary=\"Recover Virtual Chain\" />\n              </ListItem>\n            </List>\n          </div>\n        </Drawer>\n        <main className={classes.content}>\n          < Toolbar />\n          { !this.state.connected &&\n            <Connect onEthereumEnabled={(value: boolean) => this.onEthereumEnabled(value)}/>\n          }\n          { this.state.connected && this.state.newVirtualChain &&\n            <VirtualChainSubscription web3={this.state.web3!} config={this.state.config}\n              virtualChainId=\"0x0000000000000000000000000000000000000000000000000000000000000001\"\n              buttonLabel=\"Create\" \n              subscriptionLabel=\"Initial subscription\"\n              />\n          }\n          { this.state.connected && this.state.existingVirtualChain &&\n            <ExistingVirtualChain web3={this.state.web3!} config={this.state.config} />\n          }\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default useStyles(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}